#+STARTUP: overview
#+TITLE: ghetto's Emacs
#+CREATOR: ghetto
#+LANGUAGE: en
#+OPTIONS: num:nil
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;

* Theme
** Bigger font
#+BEGIN_SRC emacs-lisp
  (when (string-equal system-type "darwin")
    (set-face-attribute 'default nil
                        :height 150
                        :family "Inconsolata LGC"
                        ))
  (when (string-equal system-type "gnu/linux")
    (set-face-attribute 'default nil
                        :height 140
                        :family "Inconsolata"
                        ))
#+END_SRC
** A nice theme
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t
    :init
    (load-theme 'zenburn t))

  (set-face-attribute 'region nil :background "navy")
  (custom-set-faces
   '(line-number-current-line ((t :weight bold :foreground "CadetBlue2" :background "gray22")))
   '(show-paren-match ((t (:background "PeachPuff2" :foreground "gray13" :weight bold))))
   '(hl-line ((t (:background "gray22"))))
   )
#+END_SRC

* Basic Interface Settings
These are setting that do not depend on packages and are built-in enhancements to the UI.

** Frame size and position
#+BEGIN_SRC emacs-lisp
;;  (when window-system
;;    (add-to-list 'default-frame-alist '(height . 120))
;;    (add-to-list 'default-frame-alist '(width . 140))
;;    (set-frame-position (selected-frame) 1280 0))
#+END_SRC
** Looks
*** Remove lame startup screen
We use an actual replacement for it, keep reading or head directly to =dashboard=.
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
*** Disable menus and scrollbars
If you like using any of those, change =-1= to =1=.
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
;(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC
*** Disable bell
This is annoying, remove this line if you like being visually reminded of events.
#+BEGIN_SRC emacs-lisp
;;(setq ring-bell-function 'ignore)
(setq visible-bell t)
#+END_SRC
*** Set UTF-8 encoding
#+BEGIN_SRC emacs-lisp 
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC
*** Highligh current line
=hl-line= is awesome! It's not very awesome in the terminal version of emacs though, so we don't use that.
Besides, it's only used for programming.
#+BEGIN_SRC emacs-lisp
  (when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
  
#+END_SRC
*** Pretty symbols
Changes =lambda= to an actual symbol and a few others as well, only in the GUI version though.
#+BEGIN_SRC emacs-lisp
  (defun ghetto/prettify-symbols ()
    "make some word or string show as pretty Unicode symbols"
    (setq prettify-symbols-alist
          '(
            ("lambda" . 955) ; λ
            ("->" . 8594)    ; →
            ("=>" . 8658)    ; ⇒
            ("phi" . ?φ)     ; φ
            ("sqrt" . ?√)    ; √
            ("<=" . ?≤)
            (">=" . ?≥)
            ("pi" . ?π)
            ("+-" . ?±)
            )))

  (add-hook 'prog-mode-hook 'ghetto/prettify-symbols)
  (when window-system (global-prettify-symbols-mode t))
#+END_SRC

** Functionality
*** Disable backups and auto-saves
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC

*** Change yes-or-no questions into y-or-n questions
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Async

#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+END_SRC

* Projectile


** Enable projectile globally

#+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :config
      (setq projectile-completion-system 'helm)
      (setq projectile-mode-line '(:eval (format " Prj[%s]" (projectile-project-name))))
    
      :init
      (setq projectile-keymap-prefix (kbd "C-c p"))
      (projectile-mode 1)
      ;(setq projectile-indexing-method 'native)
      ;(setq projectile-enable-caching t)
      (setq projectile-globally-ignored-files '("._*"))
  )
#+END_SRC

** Let projectile call make
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'projectile-compile-project)
#+END_SRC

* Modeline

** Spaceline!

#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
      ;;(setq spaceline-buffer-encoding-abbrev-p nil)
      ;;(setq spaceline-line-column-p nil)
      ;;(setq spaceline-line-p nil)
      (setq powerline-default-separator 'wave)
      (spaceline-spacemacs-theme))
#+END_SRC
** Cursor position

#+BEGIN_SRC emacs-lisp
  (setq line-number-mode t)
  (setq column-number-mode t)
#+END_SRC

** Clock

*** Time format
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (setq display-time-format "%H:%M - %d %b %y")
#+END_SRC

*** Enabling the mode
This turns on the clock globally.
#+BEGIN_SRC emacs-lisp
  (display-time-mode 1)
#+END_SRC

*** Remove load average
#+BEGIN_SRC emacs-lisp
  (setq display-time-default-load-average nil)
  (setq display-time-load-average nil)
#+END_SRC
** System monitor

#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind
    ("C-c s" . symon-mode))
#+END_SRC

** Highlight modified buffers
#+BEGIN_SRC emacs-lisp
  (require 'cl)
  (lexical-let ((default-color (cons
                                 (face-background 'mode-line)
                                 (face-foreground 'mode-line))))
     (add-hook 'post-command-hook
               (lambda ()
                 (let ((color (cond ((minibufferp) default-color)
                                    (buffer-read-only default-color)
                                    ((buffer-modified-p)   '("#e80000" . "#ffffff"))
                                    (t default-color))))
                   (set-face-background 'mode-line (car color))
                   (set-face-foreground 'mode-line (cdr color))))))
  (buffer-modified-p)

#+END_SRC
* The terminal
** Default shell should be zsh
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-zsh)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

** Easy to remember keybinding
#+BEGIN_SRC emacs-lisp
  ;;(global-set-key (kbd "<C-s-return>") 'ansi-term)
  (global-set-key (kbd "<C-s-return>") 'eshell)
#+END_SRC

* Moving around emacs

** a prerequisite for others packages
#+BEGIN_SRC emacs-lisp
;;  (use-package ivy
;;   :ensure t)
#+END_SRC

** scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

** which-key and why I love emacs

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
    :diminish which-key-mode)
#+END_SRC

** windows,panes and why I hate other-window

*** Use windmove to move between windows
#+BEGIN_SRC emacs-lisp
  ;; use command key on Mac
  (setq wmmodifiers '(meta super))
  (global-set-key (vector (append wmmodifiers '(left)))  'windmove-left)
  (global-set-key (vector (append wmmodifiers '(right))) 'windmove-right)
  (global-set-key (vector (append wmmodifiers '(up)))    'windmove-up)
  (global-set-key (vector (append wmmodifiers '(down))) 'windmove-down)
  ;; wrap around at edges
  (setq windmove-wrap-around t)
#+END_SRC

*** Following window splits

#+BEGIN_SRC emacs-lisp
  (defun ghetto/split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'ghetto/split-and-follow-horizontally)

  (defun ghetto/split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'ghetto/split-and-follow-vertically)
#+END_SRC

*** Rebind keys for windows resize
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "C-s-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "C-s-<down>") 'shrink-window)
  (global-set-key (kbd "C-s-<up>") 'enlarge-window)
#+END_SRC
** winner mode
#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC
** buffers and why I hate list-buffers

*** Always murder current buffer

#+BEGIN_SRC emacs-lisp
;;  (defun kill-current-buffer ()
;;    "Kills the current buffer."
;;    (interactive)
;;    (kill-buffer (current-buffer)))
;;  (global-set-key (kbd "C-x k") 'kill-current-buffer)

(global-set-key (kbd "C-x k") 'kill-this-buffer)

#+END_SRC

*** TODO Kill buffers without asking for confirmation

#+BEGIN_SRC emacs-lisp
;;(setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
#+END_SRC

*** Turn switch-to-buffer into ibuffer

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

**** expert-mode

#+BEGIN_SRC emacs-lisp
(setq ibuffer-expert t)
#+END_SRC
**** grouping
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-projectile
    :ensure t
    :config

    (defun ghetto/ibuffer-set-filter-groups ()
      (interactive)
      (setq ibuffer-filter-groups 
            (append
             (ibuffer-projectile-generate-filter-groups)
             (list
              '("emacs" (or (name . "^\\*scratch\\*$")
                            (name . "^\\*Messages\\*$")
                            (name . "^\\*Dashboard\\*$")))
              '("dired" (mode . dired-mode))

              '("Org" (mode . org-mode))
              '("repl" (name . ".*REPL*")))
             ))

      (let ((ibuf (get-buffer "*Ibuffer*")))
        (when ibuf
          (with-current-buffer ibuf
            (pop-to-buffer ibuf)
            (ibuffer-update nil t)))))

    (add-hook 'ibuffer-hook
              (lambda ()
                (ghetto/ibuffer-set-filter-groups)
                (unless (eq ibuffer-sorting-mode 'alphabetic)
                  (ibuffer-do-sort-by-alphabetic))))

    (setq ibuffer-show-empty-filter-groups nil))

#+END_SRC

** line numbers and programming
#+BEGIN_SRC emacs-lisp
  ;;(add-hook 'prog-mode-hook 'ghetto/activate-line-numbers)

  (add-hook 'prog-mode-hook '(lambda ()
                               (setq-local display-line-numbers 'visual)
                               (line-number-mode t)))

  ;;(defun ghetto/activate-line-numbers ()
  ;;  (setq-local display-line-numbers 'visual)
  ;;  (line-number-mode t))
#+END_SRC
** Purpose
#+BEGIN_SRC emacs-lisp
  (use-package window-purpose
    :ensure t
    :bind
    ("C-c , l" . purpose-load-window-layout)
    ("C-c , s" . purpose-save-window-layout)
    :config
    (add-to-list 'purpose-user-mode-purposes '(prog-mode . source))
    (add-to-list 'purpose-user-mode-purposes '(pdf-view-mode . pdf))
    (add-to-list 'purpose-user-mode-purposes '(geiser-debug-mode . dbg))
    (add-to-list 'purpose-user-regexp-purposes '(".*REPL*" . repl))
    (add-to-list 'purpose-user-name-purposes '("*Python Doc*" . pydoc))
    (add-to-list 'purpose-user-mode-purposes '(inferior-python-mode . pyshell))
    (add-to-list 'purpose-user-mode-purposes '(compilation-mode . compiler))
    (purpose-compile-user-configuration)
    :diminish purpose-mode)
  (purpose-mode)
  (define-key purpose-mode-map (kbd "C-x C-f") 'helm-find-files)
  (define-key purpose-mode-map (kbd "C-x b") 'helm-buffers-list)
#+END_SRC
** DONE helm
CLOSED: [2018-05-18 Fri 18:42]
*** helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("C-x b" . 'helm-buffers-list)
    ("M-x" . 'helm-M-x)
    ("C-c C-f" . 'helm-mini)
    ;("C-c p G" . 'helm-projectile-grep)
    :config
    (setq
     helm-M-x-fuzzy-match t
     helm-buffers-fuzzy-matching t
     helm-recentf-fuzzy-match t
     helm-semantic-fuzzy-match t
     helm-imenu-fuzzy-match t
     helm-split-window-inside-p t
     )
    ;(define-key helm-find-files-map (kbd "<tab>") 'helm-execute-persistent-action)
    ;(define-key helm-find-files-map (kbd "C-<backspace>") 'helm-find-files-up-one-level)

    :init
    (helm-mode 1)
    :diminish helm-mode)

  (require 'helm-config)    
  (helm-autoresize-mode 1)

  (use-package helm-swoop
    :ensure t
    :init (require 'helm-swoop))

  ;; Change the keybinds to whatever you like :)
  (global-set-key (kbd "C-s") 'helm-swoop)
  (global-set-key (kbd "M-i") 'helm-swoop-back-to-last-point)
  (global-set-key (kbd "C-c M-i") 'helm-multi-swoop)
  (global-set-key (kbd "C-x M-i") 'helm-multi-swoop-all)
  (global-set-key (kbd "C-M-y") 'helm-show-kill-ring)

  ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
  (setq helm-swoop-split-direction 'split-window-vertically)
  (setq helm-swoop-split-with-multiple-windows t)
  ;;(setq helm-swoop-use-fuzzy-match t)

  (use-package helm-projectile
    :ensure t)
  (helm-projectile-on)

  (use-package helm-ag
    :ensure t)
#+END_SRC

** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("C-;" . avy-goto-char)
    ("C-M-;" . avy-goto-line)
    )

#+END_SRC
* Text manipulation
** Multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind
    ("C-c m c" . mc/edit-lines) ;; Add cursors to selected region (multiple lines)
    ;; Add cursors by keyword (mark keyword and then use below)
    ("C->" . mc/mark-next-like-this)
    ("C-<" . mc/mark-previous-like-this)
    ("C-c C-<" . mc/mark-all-like-this))
  (require 'mc-hide-unmatched-lines-mode)
#+END_SRC
* Minor conveniences
** Electric
#+BEGIN_SRC emacs-lisp
(setq electric-pair-pairs '(
                           (?\{ . ?\})
                           (?\( . ?\))
                           (?\[ . ?\])
                           (?\" . ?\")
                           ))
#+END_SRC

And now to enable it
#+BEGIN_SRC emacs-lisp
(electric-pair-mode t)
#+END_SRC

** Rainbow

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode)
    :diminish rainbow-mode)
#+END_SRC

** Show parens

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC
** Rainbow delimiters

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    :diminish rainbow-delimiters-mode)
#+END_SRC

** Expand region

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC

** Dired
#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-alh")
  (setq dired-dwim-target t)
  (add-to-list 'load-path (expand-file-name "~/.emacs.d/elisp"))
  (require 'dired-fixups)

  (use-package dired-collapse
    :ensure t)

  (use-package dired-hide-dotfiles
    :ensure t
    :config
    (defun my-dired-mode-hook ()
      "My `dired' mode hook."
      ;; To hide dot-files by default
      ;;(dired-hide-dotfiles-mode)
      ;; To toggle hiding
      (define-key dired-mode-map "." #'dired-hide-dotfiles-mode))
    (add-hook 'dired-mode-hook #'my-dired-mode-hook))


#+END_SRC
** Ranger
#+BEGIN_SRC emacs-lisp
  (use-package ranger
    :ensure t)
#+END_SRC
* Programming
Minor, non-completion related settings and plugins for writing code.
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
      (use-package yasnippet-snippets
        :ensure t)
      (yas-reload-all))
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :diminish 'flycheck-mode)
#+END_SRC

** company mode

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0.5)
    (setq company-minimum-prefix-length 2)
    )

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    ;;(define-key company-active-map (kbd "SPC") #'company-abort)
    )

  (use-package company-quickhelp
    :ensure t
    :config
    (company-quickhelp-mode)
    (setq company-quickhelp-delay 2))
#+END_SRC

** highlight indent guides
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'column)
    (setq highlight-indent-guides-responsive 'top)
    (setq highlight-indent-guides-delay 0)
    )

#+END_SRC
** minimap
#+BEGIN_SRC emacs-lisp
  ;;(use-package minimap
  ;;  :ensure t
  ;;  :config
  ;;  (setq minimap-dedicated-window 1)
  ;;  (setq minimap-window-location 'right)
  ;;  (setq minimap-width-fraction 0.05)
  ;;  )
#+END_SRC
** plaformio
#+BEGIN_SRC emacs-lisp
  (use-package platformio-mode
    :ensure t
    :init (add-hook 'c++-mode-hook 'platformio-conditionally-enable)
    )
#+END_SRC
** specific languages

*** TODO c/c++
**** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook 'yas-minor-mode)
  (add-hook 'c-mode-hook 'yas-minor-mode)
#+END_SRC

**** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-clang-analyzer
    :ensure t
    :config
    (with-eval-after-load 'flycheck
      (require 'flycheck-clang-analyzer)
      (flycheck-clang-analyzer-setup)
      (add-hook 'c++-mode-hook 'flycheck-mode)
      (add-hook 'c-mode-hook 'flycheck-mode)))
#+END_SRC

**** company
Requires libclang to be installed.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))

  (use-package company-c-headers
    :ensure t)

  (use-package company-irony
    :ensure t
    :config
    (setq-local company-backends '((company-c-headers
                              ;company-dabbrev-code
                              company-irony)))
    )

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
    :diminish 'irony-mode)
#+END_SRC

**** TODO helm+ggtags
#+BEGIN_SRC emacs-lisp
;(setq
; helm-gtags-ignore-case t
; helm-gtags-auto-update t
; helm-gtags-use-input-at-cursor t
; helm-gtags-pulse-at-cursor t
; helm-gtags-prefix-key "\C-cg"
; helm-gtags-suggested-key-mapping t
; )
;
;(require 'helm-gtags)
;;; Enable helm-gtags-mode
;(add-hook 'dired-mode-hook 'helm-gtags-mode)
;(add-hook 'eshell-mode-hook 'helm-gtags-mode)
;(add-hook 'c-mode-hook 'helm-gtags-mode)
;(add-hook 'c++-mode-hook 'helm-gtags-mode)
;(add-hook 'asm-mode-hook 'helm-gtags-mode)
;
;(define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
;(define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
;(define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
;(define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
;(define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
;(define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
#+END_SRC
*** python
**** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'elpy-mode-hook 'yas-minor-mode)
#+END_SRC

**** flycheck
#+BEGIN_SRC emacs-lisp
  (add-hook 'elpy-mode-hook 'flycheck-mode)
#+END_SRC
**** TODO company
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'company
    (add-hook 'python-mode-hook 'company-mode))

  (use-package company-jedi
    :ensure t
    :config
    (require 'company)
    (add-hook 'python-mode-hook 'python-mode-company-init))

  (defun python-mode-company-init ()
    (setq-local company-backends '((company-jedi
				    company-etags
				    ;company-dabbrev-code
				    ))))
#+END_SRC

**** autopep8
#+BEGIN_SRC emacs-lisp
  (use-package py-autopep8
    :ensure t
    :config
    (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))

#+END_SRC
**** elpy
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("\\.py$" . python-mode))
    :bind (:map elpy-mode-map
                ("M-." . elpy-goto-definition)
                ("M-," . pop-tag-mark))
    :config
    (setq elpy-rpc-backend "jedi"))

  (use-package python
    :mode ("\\.py" . python-mode)
    :config
    (require 'elpy)
    (setq python-indent-offset 4)
    (elpy-enable))
#+END_SRC
**** pyenv
#+BEGIN_SRC emacs-lisp
  (use-package pyenv-mode
    :ensure t
    :init
    (add-to-list 'exec-path "~/.pyenv/shims")
    (setenv "WORKON_HOME" "~/.pyenv/versions/")
    :config
    (pyenv-mode)
    :bind
    ("C-c v a" . pyenv-activate-current-project))

  (defun pyenv-activate-current-project ()
    "Automatically activates pyenv version if .python-version file exists."
    (interactive)
    (let ((python-version-directory (locate-dominating-file (buffer-file-name) ".python-version")))
      (if python-version-directory
          (let* ((pyenv-version-path (f-expand ".python-version" python-version-directory))
                 (pyenv-current-version (s-trim (f-read-text pyenv-version-path 'utf-8))))
            (pyenv-mode-set pyenv-current-version)
            (pyvenv-workon pyenv-current-version)
            (message (concat "Setting virtualenv to " pyenv-current-version))))))

  (defvar pyenv-current-version nil nil)

  (defun pyenv-init()
    "Initialize pyenv's current version to the global one."
    (let ((global-pyenv (replace-regexp-in-string "\n" "" (shell-command-to-string "pyenv global"))))
      (message (concat "Setting pyenv version to " global-pyenv))
      (pyenv-mode-set global-pyenv)
      (setq pyenv-current-version global-pyenv)))

  (add-hook 'after-init-hook 'pyenv-init)
  ;;(add-hook 'python-mode-hook 'pyenv-activate-current-project)
#+END_SRC

*** emacs-lisp
**** eldoc
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+END_SRC

**** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
#+END_SRC

**** company
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'company-mode)

  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "sbcl")
    (setq slime-contribs '(slime-fancy)))

  (use-package slime-company
    :ensure t
    :init
      (require 'company)
      (slime-setup '(slime-fancy slime-company)))
#+END_SRC
*** DONE bash
CLOSED: [2018-05-18 Fri 20:46]
**** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'sh-mode-hook 'yas-minor-mode)
#+END_SRC

**** flycheck
#+BEGIN_SRC emacs-lisp
  (add-hook 'sh-mode-hook 'flycheck-mode)

#+END_SRC

**** company
#+BEGIN_SRC emacs-lisp
  (add-hook 'sh-mode-hook 'company-mode)

  (defun shell-mode-company-init ()
    (setq-local company-backends '((company-shell
				    company-shell-env
				    company-etags
				    ;company-dabbrev-code
				    ))))

  (use-package company-shell
    :ensure t
    :config
    (require 'company)
    (add-hook 'sh-mode-hook 'shell-mode-company-init))
#+END_SRC

*** Scheme
**** company
#+BEGIN_SRC emacs-lisp
  (add-hook 'scheme-mode-hook 'company-mode)
#+END_SRC
**** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'scheme-mode-hook 'yas-minor-mode)
#+END_SRC
**** Geiser
#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :ensure t
    :config
    (setq geiser-chez-binary "scheme")
    (setq geiser-guile-binary "guile")
    (setq geiser-guile-jump-on-debug-p t)
    (setq geiser-repl-use-other-window nil)
    (add-to-list 'company-backends 'geiser-company)
    (add-hook 'geiser-mode-hook
              (lambda ()
                (company-quickhelp-mode -1)
                (company-quickhelp-local-mode -1))))

#+END_SRC
**** Paredit
#+BEGIN_SRC emacs-lisp 
  (use-package paredit
    :ensure t
    :config
    (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
    (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
    (add-hook 'geiser-repl-mode-hook      #'enable-paredit-mode))
#+END_SRC

* Git integration

** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    :bind
    ("M-g" . magit-status))
#+END_SRC

* Remote editing
** Tramp
#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")

#+END_SRC
** Editing with sudo
Pretty self-explanatory, useful as hell if you use exwm.
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind
      ("C-x M-f" . sudo-edit))
#+END_SRC
* Org

** Common settings

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (setq org-log-done t)
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

** Syntax highlighting for documents exported to HTML
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t)
#+END_SRC

** Line wrapping
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
	    '(lambda ()
	       (visual-line-mode 1)))
#+END_SRC

** TODO Keybindings
#+BEGIN_SRC emacs-lisp
  ;;(global-set-key (kbd "C-c '") 'org-edit-src-code)
  ;;(global-set-key "\C-cl") 'org-store-link)
  ;;(global-set-key "\C-ca") 'org-agenda)
  ;;(global-set-key "\C-cc") 'org-capture)
  ;;(global-set-key "\C-cb") 'org-switchb)
#+END_SRC

** Org Bullets

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

** Easy-to-add emacs-lisp template
Hitting tab after an "<el" in an org-mode file will create a template for elisp insertion.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

** Exporting options

*** latex
#+BEGIN_SRC emacs-lisp
  (when (file-directory-p "/usr/share/emacs/site-lisp/tex-utils")
    (add-to-list 'load-path "/usr/share/emacs/site-lisp/tex-utils")
    (require 'xdvi-search))
#+END_SRC
*** Twitter Bootstrap
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t)
#+END_SRC

* Diminishing modes

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'page-break-lines-mode)
    (diminish 'auto-revert-mode)
    (diminish 'visual-line-mode)
    (diminish 'geiser-autodoc-mode)
    (diminish 'abbrev-mode)
    )
#+END_SRC

* Environment
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :init
    (exec-path-from-shell-initialize))
#+END_SRC
** auth-sources
#+BEGIN_SRC emacs-lisp
  (setq auth-sources
        '((:source "~/.emacs.d/secrets/.authinfo.gpg")))
#+END_SRC

* PDF tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install))
#+END_SRC

* Cheatsheet
#+BEGIN_SRC emacs-lisp
  (use-package cheatsheet
    :ensure t)

  (cheatsheet-add-group '"Common"
                        '(:key "C-c C-f" :description "Show Helm mini (recent files, buffers...)")
                        '(:key "M-i" :description "Helm swoop back to last point)")
                        '(:key "C-M-y" :description "Show Helm kill ring)")
                        '(:key "C-x M-f" :description "sudo edit")
                        '(:key "C-x ESC ESC" :description "Redo. M-p and M-n to scroll")
                        '(:key "C-x h" :description "Select all")
                        '(:key "(c-u) C-x r N" :description "(With formatting) Insert line numbers")
                        )

  (cheatsheet-add-group '"Jump around"
                        '(:key "C-;" :description "avy goto to char")
                        '(:key "C-M-;" :description "avy goto to line")
                        )

  (cheatsheet-add-group '"Dired"
                        '(:key "." :description "Hide dotfiles")
                        '(:key "shift-(" :description "Hide details")
                        '(:key "* /" :description "Mark all directories")
                        '(:key "* *" :description "Mark all files")
                        '(:key "k" :description "Hide marked files")
                        '(:key "C-_" :description "Recover marks, hidden lines, and such (undo)")
                        )

  (cheatsheet-add-group '"Source editing"
                        '(:key "C-x h + C-M-\\" :description "Reformat buffer")
                        )

  (cheatsheet-add-group '"Multiple cursors"
                        '(:key "C-'" :description "Hide lines without cursor")
                        '(:key "C-j" :description "Insert new line")
                        )

#+END_SRC
